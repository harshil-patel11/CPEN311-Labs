                    ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
                    ;
                    ;
                    ;
                    ;
                    ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
                    ; one second intervals.
                    ;
                    ;
                    ;**************************************************************************************
                    ; Port definitions
                    ;**************************************************************************************
                    ;
                    ;
                    ;
                    CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
					CONSTANT LED0_Port, 40              ;LED[0]. Is an OUTPUT port (turns on/off every second) [as seen in picoblaze_template.v]
			        CONSTANT DATA_IN_PORT, 00	        ;input data port. this is an INPUT port.

                 
                   
                    ;**************************************************************************************
                    ; Special Register usage
                    ;**************************************************************************************
                    ;
                    ; No registers are given special names in this program.
                    ;
                    ;**************************************************************************************
                    ; Scratch Pad Memory Locations
                    ;**************************************************************************************
                    ;
                    ;
                    CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
                    CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
                    CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
                    CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
                    ;
					CONSTANT count, 06                ;Counter (to keep track of number of sums till 265 and then reset)
					CONSTANT current_sum_carry, 07    ;Audio data carry values
					CONSTANT current_sum, 08          ;Audio data values
                   
                    ;
                    ;**************************************************************************************
                    ; Useful data constants
                    ;**************************************************************************************
                    ;
                    ;
                    ; Constant to define a software delay of 1us. This must be adjusted to reflect the
                    ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                    ; calculation highly predictable. The '6' in the following equation even allows for
                    ; 'CALL delay_1us' instruction in the initiating code.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                    ; For clock rates below 10MHz the value of 1 must be used and the operation will
                    ; become lower than intended. Interrupts may effect the timing of software based
                    ; delays.
                    ;
                    CONSTANT delay_1us_constant, 0B
                    ;
                    ;
                    ;
                    ; ASCII table
                    ;
                    CONSTANT character_a, 61
                    CONSTANT character_b, 62
                    CONSTANT character_c, 63
                    CONSTANT character_d, 64
                    CONSTANT character_e, 65
                    CONSTANT character_f, 66
                    CONSTANT character_g, 67
                    CONSTANT character_h, 68
                    CONSTANT character_i, 69
                    CONSTANT character_j, 6A
                    CONSTANT character_k, 6B
                    CONSTANT character_l, 6C
                    CONSTANT character_m, 6D
                    CONSTANT character_n, 6E
                    CONSTANT character_o, 6F
                    CONSTANT character_p, 70
                    CONSTANT character_q, 71
                    CONSTANT character_r, 72
                    CONSTANT character_s, 73
                    CONSTANT character_t, 74
                    CONSTANT character_u, 75
                    CONSTANT character_v, 76
                    CONSTANT character_w, 77
                    CONSTANT character_x, 78
                    CONSTANT character_y, 79
                    CONSTANT character_z, 7A
                    CONSTANT character_A, 41
                    CONSTANT character_B, 42
                    CONSTANT character_C, 43
                    CONSTANT character_D, 44
                    CONSTANT character_E, 45
                    CONSTANT character_F, 46
                    CONSTANT character_G, 47
                    CONSTANT character_H, 48
                    CONSTANT character_I, 49
                    CONSTANT character_J, 4A
                    CONSTANT character_K, 4B
                    CONSTANT character_L, 4C
                    CONSTANT character_M, 4D
                    CONSTANT character_N, 4E
                    CONSTANT character_O, 4F
                    CONSTANT character_P, 50
                    CONSTANT character_Q, 51
                    CONSTANT character_R, 52
                    CONSTANT character_S, 53
                    CONSTANT character_T, 54
                    CONSTANT character_U, 55
                    CONSTANT character_V, 56
                    CONSTANT character_W, 57
                    CONSTANT character_X, 58
                    CONSTANT character_Y, 59
                    CONSTANT character_Z, 5A
                    CONSTANT character_0, 30
                    CONSTANT character_1, 31
                    CONSTANT character_2, 32
                    CONSTANT character_3, 33
                    CONSTANT character_4, 34
                    CONSTANT character_5, 35
                    CONSTANT character_6, 36
                    CONSTANT character_7, 37
                    CONSTANT character_8, 38
                    CONSTANT character_9, 39
                    CONSTANT character_colon, 3A
                    CONSTANT character_stop, 2E
                    CONSTANT character_semi_colon, 3B
                    CONSTANT character_minus, 2D
                    CONSTANT character_divide, 2F       ;'/'
                    CONSTANT character_plus, 2B
                    CONSTANT character_comma, 2C
                    CONSTANT character_less_than, 3C
                    CONSTANT character_greater_than, 3E
                    CONSTANT character_equals, 3D
                    CONSTANT character_space, 20
                    CONSTANT character_CR, 0D           ;carriage return
                    CONSTANT character_question, 3F     ;'?'
                    CONSTANT character_dollar, 24
                    CONSTANT character_exclaim, 21      ;'!'
                    CONSTANT character_BS, 08           ;Back Space command character
                    ;
                    ;
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Initialise the system
                    ;**************************************************************************************
                    ;
        cold_start: LOAD s0, 00                         ;Clear 1 second counter and clear LEDs
					STORE s0, current_sum               ;Add 0 to reg s0 and later use it to initialize the current sum
					STORE s0, current_sum_carry         ;Add 0 to reg s0 and later use it to initialize the current sum carry 
					STORE s0, count                     ;count = 0
		
                    OUTPUT s0, LED_port                 ;Reset initially
					OUTPUT s0, LED0_Port
                    ;
                    ENABLE INTERRUPT                    ;enable one second heart beat
                    ;
                    ;**************************************************************************************
                    ; Main program
                    ;**************************************************************************************
                    ;
                    ; Display welcome message for design
                    ;
      main_program: 
					LOAD s0, 01                          ;Load 1 in reg s0
                    OUTPUT s0, LED0_Port                 ;Turn on LED[0]
                    CALL delay_1s                        ;Keep it on for 1s.
					LOAD s0, 00                          ;Load 0 in reg s0
                    OUTPUT s0, LED0_Port                 ;Turn on LED[1]
                    CALL delay_1s                        ;Keep it off for 1s.
					JUMP main_program                    ;Keep repeating

                 
                    ;**************************************************************************************
                    ; Software delay routines
                    ;**************************************************************************************
                    ;
                    ; Delay of 1us.
                    ;
                    ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
                    ; instruction executes in 2 clock cycles making the calculation highly predictable.
                    ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
                    ; in the initiating code. Interrupts may effect software derived delays.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Registers used s0
                    ;
         delay_1us: LOAD s0, delay_1us_constant
          wait_1us: SUB s0, 01
                    JUMP NZ, wait_1us
                    RETURN
                    ;
                    ; Delay of 40us.
                    ;
                    ; Registers used s0, s1
                    ;
        delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
         wait_40us: CALL delay_1us
                    SUB s1, 01
                    JUMP NZ, wait_40us
                    RETURN
                    ;
                    ;
                    ; Delay of 1ms.
                    ;
                    ; Registers used s0, s1, s2
                    ;
         delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
          wait_1ms: CALL delay_40us
                    SUB s2, 01
                    JUMP NZ, wait_1ms
                    RETURN
                    ;
                    ; Delay of 20ms.
                    ;
                    ; Delay of 20ms used during initialisation.
                    ;
                    ; Registers used s0, s1, s2, s3
                    ;
        delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
         wait_20ms: CALL delay_1ms
                    SUB s3, 01
                    JUMP NZ, wait_20ms
                    RETURN
                    ;
                    ; Delay of approximately 1 second.
                    ;
                    ; Registers used s0, s1, s2, s3, s4
                    ;
          delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
           wait_1s: CALL delay_20ms
                    SUB s4, 01
                    JUMP NZ, wait_1s
                    RETURN
                    ;
                    ;**************************************************************************************
                    ; Interrupt Service Routine (ISR)
                    ;**************************************************************************************
                    ;
                    ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
                    ; on the 8 LEDs.
                    ;
			ISR: 
					STORE s0, ISR_preserve_s0           ;preserve register s0	
					STORE s1, ISR_preserve_s1           ;preserve register s1
					STORE s2, ISR_preserve_s2           ;preserve register s2
					STORE s3, ISR_preserve_s3           ;preserve register s3
					
					FETCH s1, current_sum               ;Fetch current_sum into s1
					FETCH s2, current_sum_carry		    ;Fetch current_sum_carry into s2
					FETCH s3, count                     ;Fetch count into s3
					
					INPUT s0, DATA_IN_PORT              ;Get input data from DATA_IN_PORT into s0
												
					COMPARE s0, 80					    ;Check if input data is negative (if s0 >= 1000_0000)
					JUMP C, not_negative                ;If not negative jump to not_negative

                    ; Taken from handbook (absolute value by changing to two's complement)
					XOR s0, FF							;Invert all bits
					ADD s0, 01                          ;Add one
					
			not_negative:
					ADD s1, s0							;Add audio data to the sum
					ADDCY s2, 00						;Carry bits of the sum (that contains the average as it is the current sum >> 256)
					
					ADD s3, 01                          ;count+=1
					COMPARE s3, FF						;count == 255 (which means 256 values have been added)
					JUMP NZ, end                        ;if 256 values have not been added, jump to end
					
					COMPARE s2, 80						;else, compare the current_sum_carry to 1000_0000
					JUMP NC, Fill7			            ;If greater, jump to Fill7 where we turn on LED[7:0]
					COMPARE s2, 40                      ;compare the current_sum_carry to 0100_0000
					JUMP NC, Fill6                      ;If greater, jump to Fill6 where we turn on LED[6:0]
					COMPARE s2, 20                      ;compare the current_sum_carry to 0010_0000
					JUMP NC, Fill5                      ;If greater, jump to Fill5 where we turn on LED[5:0]
					COMPARE s2, 10                      ;compare the current_sum_carry to 0001_0000
					JUMP NC, Fill4                      ;If greater, jump to Fill4 where we turn on LED[4:0]
					COMPARE s2, 08                      ;compare the current_sum_carry to 0000_1000
					JUMP NC, Fill3                      ;If greater, jump to Fill3 where we turn on LED[3:0]
					COMPARE s2, 04                      ;compare the current_sum_carry to 0000_0100
					JUMP NC, Fill2                      ;If greater, jump to Fill2 where we turn on LED[2:0]
					COMPARE s2, 02                      ;compare the current_sum_carry to 0000_0010
					JUMP NC, Fill1                      ;If greater, jump to Fill1 where we turn on LED[1:0]
					COMPARE s2, 01                      ;compare the current_sum_carry to 0000_0001
					JUMP NC, Fill0                      ;If greater, jump to Fill0 where we turn on LED0
					
					LOAD s0, 00                         ;Reset input data to 0
					JUMP display_led                    ;Jump to display_led
					
			Fill0: 										;Fills the LEDS with the appropriate amount	
					LOAD s0, 80                         ; Load 1000_0000 into s0
					JUMP display_led
				
			Fill1:
					LOAD s0, C0                         ; Load 1100_0000 into s0
					JUMP display_led
			
			Fill2:
					LOAD s0, E0                         ; Load 1110_0000 into s0
					JUMP display_led
			
			Fill3:
					LOAD s0, F0                         ; Load 1111_0000 into s0
					JUMP display_led
			
			Fill4:
					LOAD s0, F8                         ; Load 1111_1000 into s0
					JUMP display_led
			
			Fill5:
					LOAD s0, FC                         ; Load 1111_1100 into s0
					JUMP display_led
			
			Fill6:
					LOAD s0, FE                         ; Load 1111_1110 into s0
					JUMP display_led
					
			Fill7:
					LOAD s0, FF                         ; Load 1111_1111 into s0
					OUTPUT s0, LED_port                 ; Output on LED_port
			
					
			display_led:									
					OUTPUT s0, LED_port                 ;Output the volume on the LED_port
					LOAD s0, 00                         ;Reset input value to 0
					LOAD s1, 00                         ;Reset current_sum to 0
					LOAD s2, 00                         ;Reset current_sum_carry to 0
					LOAD s3, 00                         ;Reset count to 0
					
			end:
					STORE s3, count				        ;Stores the current counters into memory
					STORE s1, current_sum               ;Stores the current_sum into memory
					STORE s2, current_sum_carry         ;Stores the current_sum_carry into memory
					
                    FETCH s0, ISR_preserve_s0           ;restore register s0
					FETCH s1, ISR_preserve_s1           ;restore register s1
					FETCH s2, ISR_preserve_s2           ;restore register s2
					FETCH s3, ISR_preserve_s3           ;restore register s3
                    RETURNI ENABLE
                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Vector
                    ;**************************************************************************************
                    ;
                    ADDRESS 3FF
                    JUMP ISR
                    ;
                    ;
